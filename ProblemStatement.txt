Problem Statement
Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.

Follow up:
The overall run time complexity should be O(log (m+n)).

Constraints:
nums1.length == m
nums2.length == n
0 <= m <= 1000
0 <= n <= 1000
1 <= m + n <= 2000
-106 <= nums1[i], nums2[i] <= 106
Examples
Example 1:

Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.
Example 2:

Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.
Analysis
The problem looks very simple at first glance. The resulting array will also be a sorted array with the length m + n.

Thus, there can be two cases -

Let's say the merged/combined array is - result
If (m + n) is odd, then the median will be result[(m + n + 1) / 2].
If (m + n) is even, then the median will be (result[(m + n) / 2] + result[(m + n) / 2 + 1]) / 2.
The arrays are already sorted so we don’t have to worry about that. We can just merge given arrays using the merge() function of the Merge Sort.

So what’s the problem 🤔?

The problem is that the question mentions that time complexity should be O(log(m + n)). With the merge function, the complexity will be O(m + n). Thus, we cannot use merge function’s logic to solve this problem.

Approach
At this point, I would suggest reading the problem statement one more time very carefully. It has hints which are screaming about the algorithm that we should use to solve this problem.

Did you get it❓ I am sure you did but let’s specify it anyway 😄.

The arrays are sorted.
The time complexity should be O(log(m + n)).
YES! We need to use good ol’ Binary Search 🥰.

But how to use Binary Search here? The problem is to find the index in both the arrays such that the elements on the left are smaller than the elements on the right. And this is true for the combined array.

Didn’t get it? I would urge you to read the above statement again because this is the central idea of our solution. If you understood it, see the example below -

Let a = [4, 7, 11, 15, 19, 22] => m = 6
Let b = [3, 6, 8, 10, 13, 17, 20] => n = 7
then the combination of a and b would be -
c = [3, 4, 6, 7, 8, 10, 11, 13, 15, 17, 19, 20, 22] => m + n  = 6 + 7 = 13
Thus, the median will be (13 + 1)/2th = 7th element which is 11.
This is only possible if we divide arrays a and b at index 2 and 4 respectively. This way, we will have -

Left	Right
a = 4, 7, 11	a = 15, 19, 22
b = 3, 6, 8, 10	b = 13, 17, 20
Thus, we will use binary search to find these indices where if we divide the arrays, we will get our median.

How will we find these?

Find the length of the smaller arrays of the two. We will perform binary search on the smaller array.
For binary search, we will have two pointers - start = 0 and end = m (assuming m is the smaller length).
Loop until start meets end i.e., while (start <= end) { ... }.
Calculate the partition index (partitionA) for a which is the mid-point of start and end i.e., (start + end) / 2.
Calculate the partition index (partitionB) for b which is (m + n + 1) / 2 - partitionA.
Find the maximum element in the left of a and b and minimum element in the right of a and b.
Now, we can have three cases -
(i) If (maxLeftA <= minRightB && maxLeftB <= minRightA), then we have hit the jackpot 💰. Now, we can return the median based on (m + n) is even or odd.

(ii) Else If (maxLeftA > minRightB), it means, we are too far on the right and we need to go on the left, so, set end = partitionA - 1.

(iii) Else, we are too far on the left and we need to go to the right, so, set start = partitionA + 1.